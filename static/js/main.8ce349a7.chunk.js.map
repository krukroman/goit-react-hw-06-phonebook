{"version":3,"sources":["components/ContactsFilter/ContactsFilter.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","components/functions/isContactExists.js","redux/store.js","components/ContactsEditor/ContactsEditor.js","redux/contacts/contacts-selectors.js","components/Contact/Contact.js","components/ContactsList/ContactsList.js","components/ContactsFilter/ContactsFilter.js","views/PhonebookView.js","App.js","index.js","components/ContactsEditor/ContactsEditor.module.scss","components/Contact/Contact.module.scss","components/ContactsList/ContactsList.module.scss"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","items","createReducer","state","contacts","normalizeedName","toLocaleLowerCase","find","contact","includes","isContactExist","alert","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","serializableMiddleware","createSerializableStateInvariantMiddleware","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","contactsReducer","middleware","devTools","process","persistor","persistStore","ContactsEditor","useState","setName","setNumber","dispatch","useDispatch","inputNameId","inputNumberId","handleChange","e","target","value","className","s","container","form","onSubmit","preventDefault","label","htmlFor","input","type","onChange","pattern","title","required","btn","getContacts","getFilter","getVisibleContacts","normalizedFilter","sort","a","b","localeCompare","Contact","onDelete","info","onClick","ContactsList","useSelector","length","list","map","item","onDeleteContact","status","Filter","placeholder","PhonebookView","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.8ce349a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsFilter_container__xAYob\",\"label\":\"ContactsFilter_label__1fDbQ\",\"input\":\"ContactsFilter_input__1Nam5\"};","import { nanoid } from 'nanoid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\n\nexport default contactsActions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contacts-actions';\n\nimport isContactExist from 'components/functions/isContactExists';\n\nconst items = createReducer([], {\n  [contactsActions.addContact]: (state, { payload }) => {\n    if (isContactExist(state, payload.name)) {\n      alert(`Contact with ${payload.name} allready exists`);\n      return;\n    }\n    return [...state, payload];\n  },\n  [contactsActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","export default function isContactExist(contacts, name) {\n  const normalizeedName = name.toLocaleLowerCase();\n  return contacts.find(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizeedName),\n  );\n}\n","import {\n  configureStore,\n  createSerializableStateInvariantMiddleware,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst serializableMiddleware = createSerializableStateInvariantMiddleware({\n  ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n});\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware: [serializableMiddleware],\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport contactsActions from 'redux/contacts/contacts-actions';\n\nimport s from './ContactsEditor.module.scss';\n\nexport default function ContactsEditor() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsActions.addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.container}>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={inputNameId}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChange}\n            value={name}\n            id={inputNameId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label} htmlFor={inputNumberId}>\n          Phone number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChange}\n            value={number}\n            id={inputNumberId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLocaleLowerCase();\n  return [...contacts]\n    .sort((a, b) => a.name.localeCompare(b.name))\n    .filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n};\n","import PropTypes from 'prop-types';\r\nimport s from './Contact.module.scss';\r\nexport default function Contact({ name, number, onDelete }) {\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.info}>\r\n        <p className={s.name}>{name}</p>\r\n        <p className={s.number}>{number}</p>\r\n      </div>\r\n      <button className={s.btn} type=\"button\" onClick={onDelete}>\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport contactsActions from 'redux/contacts/contacts-actions';\nimport Contact from '../Contact';\n\nimport s from './ContactsList.module.scss';\n\nexport default function ContactsList() {\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(contactsActions.deleteContact(id));\n  return (\n    <div className={s.container}>\n      <h2 className={s.title}>Contacts</h2>\n      {contacts.length !== 0 ? (\n        <ul className={s.list}>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <li key={id} className={s.item}>\n                <Contact\n                  name={name}\n                  number={number}\n                  onDelete={() => onDeleteContact(id)}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className={s.status}>\n          Contacts list is empty, or filtered name doesn`t exists. Please add\n          contact, or type correct query in filter\n        </p>\n      )}\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/contacts-selectors';\nimport contactsActions from 'redux/contacts/contacts-actions';\nimport s from './ContactsFilter.module.scss';\n\nexport default function Filter() {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <div className={s.container}>\n      <label className={s.label}>\n        Filter by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n          placeholder={`Contacts: ${contacts.length}`}\n        />\n      </label>\n    </div>\n  );\n}\n","import ContactsEditor from 'components/ContactsEditor';\r\nimport ContactsList from 'components/ContactsList';\r\nimport ContactsFilter from 'components/ContactsFilter';\r\n\r\nexport default function PhonebookView() {\r\n  return (\r\n    <>\r\n      <ContactsEditor />\r\n      <ContactsFilter />\r\n      <ContactsList />\r\n    </>\r\n  );\r\n}\r\n","import PhonebookView from 'views/PhonebookView';\r\n\r\nexport default function App() {\r\n  return <PhonebookView />;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from 'redux/store';\nimport './index.scss';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsEditor_container__1WfgF\",\"form\":\"ContactsEditor_form__Cx8xv\",\"label\":\"ContactsEditor_label__1dTS6\",\"input\":\"ContactsEditor_input__3tbsC\",\"btn\":\"ContactsEditor_btn__2iclQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Contact_container__2Bz7P\",\"name\":\"Contact_name__1QREy\",\"number\":\"Contact_number__HfRFB\",\"btn\":\"Contact_btn__tKDNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsList_container__3R_a2\",\"title\":\"ContactsList_title__23qkv\",\"list\":\"ContactsList_list__1SBnp\",\"item\":\"ContactsList_item__3FZ2k\",\"status\":\"ContactsList_status__3XmEn\"};"],"sourceRoot":""}