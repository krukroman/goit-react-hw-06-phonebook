{"version":3,"sources":["Components/ContactsEditor/ContactsEditor.js","Components/Contact/Contact.js","Components/ContactsList/ContactsList.js","Components/ContactsFilter/ContactsFilter.js","App.js","Components/hooks/useLocalStorage.js","index.js","Components/ContactsEditor/ContactsEditor.module.scss","Components/Contact/Contact.module.scss","Components/ContactsList/ContactsList.module.scss","Components/ContactsFilter/ContactsFilter.module.scss"],"names":["ContactsEditor","onSubmit","useState","name","setName","number","setNumber","inputNameId","nanoid","inputNumberId","handleChange","e","target","value","className","s","container","form","preventDefault","label","htmlFor","input","type","onChange","id","pattern","title","required","btn","Contact","onDelete","info","onClick","ContactsList","contacts","onDeleteContact","length","list","map","item","status","Filter","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","isContactExist","str","normalizeedName","toLocaleLowerCase","find","contact","includes","alert","newContact","prevContacts","normalizedFilter","sort","a","b","localeCompare","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5dcc10db.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsEditor.module.scss';\n\nexport default function ContactsEditor({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.container}>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={inputNameId}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChange}\n            value={name}\n            id={inputNameId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label} htmlFor={inputNumberId}>\n          Phone number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChange}\n            value={number}\n            id={inputNumberId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactsEditor.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.scss';\nexport default function Contact({ name, number, onDelete }) {\n  return (\n    <div className={s.container}>\n      <div className={s.info}>\n        <p className={s.name}>{name}</p>\n        <p className={s.number}>{number}</p>\n      </div>\n      <button className={s.btn} type=\"button\" onClick={onDelete}>\n        Delete\n      </button>\n    </div>\n  );\n}\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import Contact from '../Contact';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsList.module.scss';\n\nexport default function ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <div className={s.container}>\n      <h2 className={s.title}>Contacts</h2>\n      {contacts.length !== 0 ? (\n        <ul className={s.list}>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <li key={id} className={s.item}>\n                <Contact\n                  name={name}\n                  number={number}\n                  onDelete={() => onDeleteContact(id)}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className={s.status}>\n          Contacts list is empty, or filtered name doesn`t exists. Please add\n          contact, or type correct query in filter\n        </p>\n      )}\n    </div>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './ContactsFilter.module.scss';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <div className={s.container}>\n      <label className={s.label}>\n        Filter by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n}\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useState } from 'react';\nimport useLocalStorage from './Components/hooks/useLocalStorage';\nimport { nanoid } from 'nanoid';\nimport ContactsEditor from './Components/ContactsEditor';\nimport ContactsList from './Components/ContactsList';\nimport ContactsFilter from './Components/ContactsFilter';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const addContact = (name, number) => {\n    if (!isContactExist(name)) {\n      const newContact = {\n        id: nanoid(),\n        name,\n        number,\n      };\n\n      setContacts(prevContacts => [newContact, ...prevContacts]);\n    } else {\n      alert(`${name} is allready in contacts list`);\n      return;\n    }\n  };\n\n  const removeContact = contactId => {\n    setContacts(contacts =>\n      contacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const isContactExist = str => {\n    const normalizeedName = str.toLocaleLowerCase();\n\n    return contacts.find(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizeedName),\n    );\n  };\n\n  const changeFilter = e => {\n    const { value } = e.target;\n    setFilter(value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return [...contacts]\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(contact =>\n        contact.name.toLocaleLowerCase().includes(normalizedFilter),\n      );\n  };\n\n  return (\n    <div>\n      <ContactsEditor onSubmit={addContact} />\n      <ContactsFilter value={filter} onChange={changeFilter} />\n      <ContactsList\n        contacts={getVisibleContacts()}\n        onDeleteContact={removeContact}\n      />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsEditor_container__1YJfX\",\"form\":\"ContactsEditor_form__2F2EW\",\"label\":\"ContactsEditor_label__1sG6P\",\"input\":\"ContactsEditor_input__1vUEU\",\"btn\":\"ContactsEditor_btn__1YhFd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Contact_container__5rDZD\",\"name\":\"Contact_name__2BmOZ\",\"number\":\"Contact_number__1QBeZ\",\"btn\":\"Contact_btn__17r19\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsList_container__ooZlr\",\"title\":\"ContactsList_title__3l0TM\",\"list\":\"ContactsList_list__2BVNj\",\"item\":\"ContactsList_item__1asVC\",\"status\":\"ContactsList_status__1_CrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsFilter_container__oO8RO\",\"label\":\"ContactsFilter_label__2RHfS\",\"input\":\"ContactsFilter_input__1CXyG\"};"],"sourceRoot":""}